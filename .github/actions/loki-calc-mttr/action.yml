name: "Loki Calc MTTR"
description: "Calcula MTTD/MTTR desde Loki entre start/end"
inputs:
  start_ns:
    description: "Timestamp inicio (ns)"
    required: true
  end_ns:
    description: "Timestamp fin (ns)"
    required: true
  query_error:
    description: "Consulta LogQL que detecta errores"
    required: true
  loki_url:
    description: "Base URL de Loki (ej: http://127.0.0.1:3100)"
    required: false
    default: "http://127.0.0.1:3100"
outputs:
  mttd_seconds:
    description: "Tiempo hasta detectar (s)"
    value: ${{ steps.calc.outputs.mttd_seconds }}
  mttr_seconds:
    description: "Tiempo total de recuperaciÃ³n (s)"
    value: ${{ steps.calc.outputs.mttr_seconds }}
runs:
  using: "composite"
  steps:
    - id: calc
      shell: bash
      env:
        LOKI_URL: "${{ inputs.loki_url }}/loki/api/v1"
      run: |
        set -euo pipefail
        START_NS="${{ inputs.start_ns }}"
        END_NS="${{ inputs.end_ns }}"
        Q="${{ inputs.query_error }}"

        RES="$(curl -sG "$LOKI_URL/query_range" \
          --data-urlencode "query=$Q" \
          --data-urlencode "start=$START_NS" \
          --data-urlencode "end=$END_NS" \
          --data-urlencode "limit=1")"

        FIRST_ERR_NS="$(echo "$RES" | jq -r '.data.result[0].values[0][0]' 2>/dev/null || true)"

        if [ -z "$FIRST_ERR_NS" ] || [ "$FIRST_ERR_NS" = "null" ]; then
          MTTD=0
        else
          MTTD=$(( (FIRST_ERR_NS - START_NS)/1000000000 ))
        fi
        MTTR=$(( (END_NS - START_NS)/1000000000 ))

        echo "mttd_seconds=$MTTD" >> "$GITHUB_OUTPUT"
        echo "mttr_seconds=$MTTR" >> "$GITHUB_OUTPUT"
