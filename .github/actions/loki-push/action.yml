name: "Loki Push Marker"
description: "Marca inicio/fin de incidente en Loki"
inputs:
  type:
    description: "Tipo de marca (incident_start|incident_end)"
    required: true
  run_id:
    description: "ID de ejecuciÃ³n (github.run_id)"
    required: true
  app:
    description: "Etiqueta app"
    required: true
  message:
    description: "Mensaje opcional"
    required: false
    default: ""
  loki_url:
    description: "Base URL de Loki (ej: http://127.0.0.1:3100)"
    required: false
    default: "http://127.0.0.1:3100"
outputs:
  ts_ns:
    description: "Timestamp en nanosegundos"
    value: ${{ steps.push.outputs.ts_ns }}
runs:
  using: "composite"
  steps:
    - id: push
      shell: bash
      env:
        LOKI_URL: "${{ inputs.loki_url }}/loki/api/v1"
      run: |
        set -euo pipefail
        TS_NS=$(date +%s%N)
        cat > payload.json <<'JSON'
        {"streams":[{"stream":{"source":"gha"},"values":[["TS_PLACEHOLDER","MSG_PLACEHOLDER"]]}]}
        JSON
        jq --arg ts "$TS_NS" \
           --arg typ "${{ inputs.type }}" \
           --arg run "${{ inputs.run_id }}" \
           --arg app "${{ inputs.app }}" \
           --arg msg "${{ inputs.message }}" \
           '.streams[0].stream += {"type":$typ,"incident_id":$run,"app":$app}
            | .streams[0].values[0][0] = $ts
            | .streams[0].values[0][1] = $msg' \
           payload.json > payload2.json

        # Retries con backoff: 10 intentos [0.5s,1s,2s,...]
        n=0
        until curl -fsS -X POST -H "Content-Type: application/json" \
                 "$LOKI_URL/push" --data-binary @payload2.json; do
          n=$((n+1))
          if [ $n -ge 10 ]; then
            echo "ERROR: no se pudo hacer push a Loki tras $n intentos" >&2
            echo "Log de payload:" >&2
            head -c 1000 payload2.json >&2 || true
            exit 1
          fi
          sleep "$(awk "BEGIN { print 0.5 * (2 ^ $n) }")" 2>/dev/null || sleep 1
        done

        echo "ts_ns=$TS_NS" >> "$GITHUB_OUTPUT"
