name: Reusable - Android Emulator Test (Self-Hosted)

on:
  workflow_call:
    inputs:
      java_version:
        type: string
        default: '17'
      avd_name:
        type: string
        default: 'ciPixel6'
      gpu_mode:
        type: string
        default: 'swiftshader_indirect'
    outputs:
      tests_pass_ratio:
        value: ${{ jobs.emu.outputs.tests_pass_ratio }}
      startup_ms:
        value: ${{ jobs.emu.outputs.startup_ms }}

jobs:
  emu:
    runs-on: self-hosted
    outputs:
      tests_pass_ratio: ${{ steps.ratio.outputs.ratio }}
      startup_ms: ${{ steps.derive.outputs.STARTUP_MS }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.java_version }}

      - uses: gradle/actions/setup-gradle@v3

      - name: Build (unit tests + apk)
        run: ./gradlew --no-daemon clean test assembleDebug

      - name: Boot emulator (headless)
        shell: bash
        run: |
          nohup emulator -avd "${{ inputs.avd_name }}" \
            -no-window -no-boot-anim -noaudio -no-snapshot \
            -gpu ${{ inputs.gpu_mode }} -accel off -qemu -m 3072 >/dev/null 2>&1 &
          adb wait-for-device
          for i in {1..120}; do
            b=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            [ "$b" = "1" ] && break
            sleep 2
          done

      - name: Instrumentation tests
        run: ./gradlew --no-daemon connectedDebugAndroidTest

      - name: Collect logcat JSON metrics (host path Promtail)
        shell: bash
        run: |
          HOST_LOG_DIR="/home/gha-runner/obs/ci-logs"
          mkdir -p "$HOST_LOG_DIR"
          adb logcat -d | grep METRIC_JSON > "$HOST_LOG_DIR/logcat.jsonl" || true
          mkdir -p ci/logs && cp -f "$HOST_LOG_DIR/logcat.jsonl" ci/logs/logcat.jsonl 2>/dev/null || true

      - id: derive
        shell: bash
        run: |
          STARTUP=$(jq -r 'select(.metric=="app_startup_ms") | .value' ci/logs/logcat.jsonl 2>/dev/null | head -n1)
          [ -z "$STARTUP" ] && STARTUP=0
          echo "STARTUP_MS=$STARTUP" >> "$GITHUB_OUTPUT"

      - id: ratio
        shell: bash
        run: |
          TOTAL=$(grep -R "<testsuite" app/build/outputs/androidTest-results/connected/* 2>/dev/null | awk -F'"' '{for(i=1;i<=NF;i++){if($i==" tests="){print $(i+1)}}}' | paste -sd+ - | bc || echo 1)
          FAIL=$(grep -R "<testsuite" app/build/outputs/androidTest-results/connected/* 2>/dev/null | awk -F'"' '{for(i=1;i<=NF;i++){if($i==" failures="){print $(i+1)}}}' | paste -sd+ - | bc || echo 0)
          OK=$((TOTAL-FAIL)); export TOTAL OK
          python3 ci/compute_pass_ratio.py > ratio.txt || echo "0" > ratio.txt
          echo "ratio=$(cat ratio.txt)" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v4
        with:
          name: reports-and-logs
          path: |
            app/build/reports
            app/build/outputs/androidTest-results
            ci/logs/logcat.jsonl
