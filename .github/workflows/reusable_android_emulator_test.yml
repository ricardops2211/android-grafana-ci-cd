name: Reusable - Android Emulator Test (Self-Hosted)

on:
  workflow_call:
    inputs:
      enable_ui_viewer:
        type: boolean
        default: false
      java_version:
        type: string
        default: '17'
      avd_name:
        type: string
        default: 'ciPixel6'
      gpu_mode:
        type: string
        default: 'swiftshader_indirect'
      project_dir:
        type: string
        default: '.'
    outputs:
      tests_pass_ratio:
        value: ${{ jobs.emu.outputs.tests_pass_ratio }}
      startup_ms:
        value: ${{ jobs.emu.outputs.startup_ms }}

jobs:
  emu:
    runs-on: self-hosted
    outputs:
      tests_pass_ratio: ${{ steps.ratio.outputs.ratio }}
      startup_ms: ${{ steps.derive.outputs.STARTUP_MS }}
    steps:
      - uses: actions/checkout@v4

      - name: Show tree (debug)
        run: |
          echo "Project dir: ${{ inputs.project_dir }}"
          ls -la "${{ inputs.project_dir }}" || true

      # No convivan procesos de emu/adb de runs anteriores
      - name: Kill previous emulators/adb
        run: |
          set +e
          adb kill-server || true
          pkill -f "qemu-system" || true
          pkill -f "emulator.*-avd" || true
          sleep 2
          ps aux | egrep "emulator|qemu|adb" || true

      # --- (Opcional) Levantar emulador con UI web (noVNC) ---
      - name: Start Android UI (noVNC) via Docker Compose
        if: ${{ inputs.enable_ui_viewer }}
        env:
          UI_DIR: /home/gha-runner/android-ui
        run: |
          set -e
          mkdir -p "$UI_DIR"
          cp -f infra/android-ui/docker-compose.yml "$UI_DIR/docker-compose.yml"
          cd "$UI_DIR"
          docker compose up -d
          # Espera a que noVNC levante
          for i in {1..90}; do
            curl -sSf http://localhost:6080 >/dev/null 2>&1 && break
            sleep 2
          done
          # Calcula IP del host (no la del bridge)
          HOST_IP=$(ip route get 1.1.1.1 | awk '{print $7; exit}')
          [ -z "$HOST_IP" ] && HOST_IP="localhost"
          echo "ANDROID_UI_URL=http://$HOST_IP:6080" >> $GITHUB_ENV
          echo "Open $ANDROID_UI_URL"

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.java_version }}

      # Fuerza wrapper limpio SIEMPRE (evita wrappers rotos)
      - name: Force fresh Gradle wrapper (8.8)
        run: |
          cd "${{ inputs.project_dir }}"
          rm -f   gradlew gradlew.bat || true
          rm -rf  gradle/wrapper      || true
          TMP="$RUNNER_TEMP/gradle-boot"; mkdir -p "$TMP"
          curl -fsSL -o "$TMP/gradle.zip" https://services.gradle.org/distributions/gradle-8.8-bin.zip
          unzip -q "$TMP/gradle.zip" -d "$TMP"
          export GRADLE_HOME="$TMP/gradle-8.8"
          export PATH="$GRADLE_HOME/bin:$PATH"
          gradle --version
          if [ ! -f settings.gradle ] && [ ! -f settings.gradle.kts ]; then
            echo "❌ No se encontró settings.gradle(.kts) en $PWD (project_dir)."
            exit 1
          fi
          gradle wrapper --gradle-version 8.8
          sed -i 's/\r$//' gradlew || true
          chmod +x gradlew
          ./gradlew --version

      - uses: gradle/actions/setup-gradle@v3
        with:
          build-root-directory: ${{ inputs.project_dir }}

      # Asegura AndroidX
      - name: Ensure AndroidX flags in gradle.properties
        run: |
          FILE="${{ inputs.project_dir }}/gradle.properties"
          touch "$FILE"
          sed -i '/^android.useAndroidX=/d' "$FILE" || true
          sed -i '/^android.enableJetifier=/d' "$FILE" || true
          {
            echo "android.useAndroidX=true"
            echo "android.enableJetifier=true"
          } >> "$FILE"
          echo "==== gradle.properties ===="
          cat "$FILE"

      - name: (optional) Clean Gradle caches
        run: |
          rm -rf ~/.gradle/caches/modules-2/modules-2.lock || true
          rm -rf ~/.gradle/caches/*/plugin-resolution || true

      - name: Build (unit tests + apk)
        run: |
          cd "${{ inputs.project_dir }}"
          ./gradlew --no-daemon clean test assembleDebug


      # ==== Branch A: UI viewer (usar contenedor a través de ADB TCP) ====
      - name: Connect to docker UI emulator over ADB TCP
        if: ${{ inputs.enable_ui_viewer }}
        run: |
          set -e
          HOST_IP=$(ip route get 1.1.1.1 | awk '{print $7; exit}')
          [ -z "$HOST_IP" ] && HOST_IP="127.0.0.1"
          # Conecta al ADB del contenedor (mapeado en 5555)
          adb connect "$HOST_IP:5555" || true
          # Espera robusta: boot, animación parada y Package Manager listo
          for i in {1..240}; do
            BOOT=$(adb -s "$HOST_IP:5555" shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            ANIM=$(adb -s "$HOST_IP:5555" shell getprop init.svc.bootanim 2>/dev/null | tr -d '\r')
            PMOK=0
            adb -s "$HOST_IP:5555" shell cmd package list packages >/dev/null 2>&1 && PMOK=1
            if [ "$BOOT" = "1" ] && [ "$ANIM" = "stopped" ] && [ $PMOK -eq 1 ]; then
              echo "Emulator (docker) is ready."
              break
            fi
            sleep 2
          done
          echo "ANDROID_SERIAL=$HOST_IP:5555" >> $GITHUB_ENV

      # ==== Branch B: Headless local (un solo emu en 5554) ====
      - name: Boot emulator (headless, single 5554)
        if: ${{ !inputs.enable_ui_viewer }}
        run: |
          set -e
          nohup emulator -avd "${{ inputs.avd_name }}" \
            -port 5554 \
            -no-window -no-boot-anim -noaudio -no-snapshot \
            -gpu ${{ inputs.gpu_mode }} -accel off -qemu -m 3072 >/dev/null 2>&1 &
          adb wait-for-device
          for i in {1..240}; do
            BOOT=$(adb -s emulator-5554 shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            ANIM=$(adb -s emulator-5554 shell getprop init.svc.bootanim 2>/dev/null | tr -d '\r')
            PMOK=0
            adb -s emulator-5554 shell cmd package list packages >/dev/null 2>&1 && PMOK=1
            if [ "$BOOT" = "1" ] && [ "$ANIM" = "stopped" ] && [ $PMOK -eq 1 ]; then
              echo "Emulator (headless) is ready."
              break
            fi
            sleep 2
          done
          echo "ANDROID_SERIAL=emulator-5554" >> $GITHUB_ENV

      # Aumenta timeouts de instalación por si la VM va lenta
      - name: Bump adb/Gradle timeouts
        run: |
          echo "ANDROID_ADB_INSTALL_TIMEOUT=8" >> $GITHUB_ENV
          echo "org.gradle.jvmargs=-Xmx2g -Dkotlin.daemon.jvm.options=-Xmx1g" >> $GITHUB_ENV

      - name: Instrumentation tests (single device)
        env:
          ANDROID_SERIAL: ${{ env.ANDROID_SERIAL }}
        run: |
          cd "${{ inputs.project_dir }}"
          ./gradlew --no-daemon connectedDebugAndroidTest

      - name: Collect logcat JSON metrics (host path Promtail)
        id: collect
        run: |
          HOST_LOG_DIR="/home/gha-runner/obs/ci-logs"
          mkdir -p "$HOST_LOG_DIR"
          adb -s "${{ env.ANDROID_SERIAL }}" logcat -d | grep METRIC_JSON > "$HOST_LOG_DIR/logcat.jsonl" || true
          mkdir -p "${{ inputs.project_dir }}/ci/logs" \
            && cp -f "$HOST_LOG_DIR/logcat.jsonl" "${{ inputs.project_dir }}/ci/logs/logcat.jsonl" 2>/dev/null || true

      - id: derive
        run: |
          FILE="${{ inputs.project_dir }}/ci/logs/logcat.jsonl"
          STARTUP=$(jq -r 'select(.metric=="app_startup_ms") | .value' "$FILE" 2>/dev/null | head -n1)
          [ -z "$STARTUP" ] && STARTUP=0
          echo "STARTUP_MS=$STARTUP" >> "$GITHUB_OUTPUT"

      - id: ratio
        run: |
          BASE="${{ inputs.project_dir }}/app/build/outputs/androidTest-results/connected"
          TOTAL=$(grep -R "<testsuite" "$BASE"/* 2>/dev/null | awk -F'"' '{for(i=1;i<=NF;i++){if($i==" tests="){print $(i+1)}}}' | paste -sd+ - | bc || echo 1)
          FAIL=$(grep -R "<testsuite" "$BASE"/* 2>/dev/null | awk -F'"' '{for(i=1;i<=NF;i++){if($i==" failures="){print $(i+1)}}}' | paste -sd+ - | bc || echo 0)
          OK=$((TOTAL-FAIL)); export TOTAL OK
          python3 "${{ inputs.project_dir }}/ci/compute_pass_ratio.py" > ratio.txt || echo "0" > ratio.txt
          echo "ratio=$(cat ratio.txt)" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v4
        with:
          name: reports-and-logs
          path: |
            ${{ inputs.project_dir }}/app/build/reports
            ${{ inputs.project_dir }}/app/build/outputs/androidTest-results
            ${{ inputs.project_dir }}/ci/logs/logcat.jsonl

      # --- SIEMPRE apagar UI web si se encendió ---
      - name: Stop Android UI (noVNC)
        if: ${{ always() && inputs.enable_ui_viewer }}
        env:
          UI_DIR: /home/gha-runner/android-ui
        run: |
          set +e
          cd "$UI_DIR" 2>/dev/null || exit 0
          docker compose ps || true
          docker compose down -v || true
