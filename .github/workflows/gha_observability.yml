name: gha_observability

on:
  workflow_call:
    secrets:
      GC_PROM_URL:          { required: true }
      GC_PROM_USERNAME:     { required: true }
      GC_PROM_PASSWORD:     { required: true }
      GC_LOKI_URL:          { required: true }
      GC_LOKI_USERNAME:     { required: true }
      GC_LOKI_PASSWORD:     { required: true }

jobs:
  obs:
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig
      GC_PROM_URL:       ${{ secrets.GC_PROM_URL }}
      GC_PROM_USERNAME:  ${{ secrets.GC_PROM_USERNAME }}
      GC_PROM_PASSWORD:  ${{ secrets.GC_PROM_PASSWORD }}
      GC_LOKI_URL:       ${{ secrets.GC_LOKI_URL }}
      GC_LOKI_USERNAME:  ${{ secrets.GC_LOKI_USERNAME }}
      GC_LOKI_PASSWORD:  ${{ secrets.GC_LOKI_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      # 1) Herramientas
      - name: Install tools
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y jq curl ca-certificates gnupg gettext-base
          curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl -Lo kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
          chmod +x kind && sudo mv kind /usr/local/bin/
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # 2) Evitar rate limit al tirar imágenes de ghcr
      - name: Login GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # 3) Crear clúster KIND en ESTE job
      - name: Create kind cluster (local)
        env:
          KIND_NODE_CANDIDATES: "kindest/node:v1.29.2 kindest/node:v1.28.0 kindest/node:v1.30.0"
        run: |
          set -e
          PICK=""
          for img in $KIND_NODE_CANDIDATES; do
            for i in 1 2 3; do docker pull "$img" && { PICK="$img"; break; } || sleep 5; done
            [[ -n "$PICK" ]] && break
          done
          [[ -z "$PICK" ]] && { echo "::error::No node image"; exit 1; }

          cat > kind.yaml <<'YAML'
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes: [ { role: control-plane } ]
          YAML

          kind create cluster --name sre-mttr --config kind.yaml --image "$PICK"
          kind get kubeconfig --name sre-mttr > "$KUBECONFIG"
          chmod 600 "$KUBECONFIG"
          kubectl wait --for=condition=Ready nodes --all --timeout=180s

      # 4) (ya tenías) repos Helm, secret, chart, etc…
      - name: Helm repos
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Ensure namespaces exist
        run: |
          set -euo pipefail
          kubectl get ns monitoring >/dev/null 2>&1 || kubectl create ns monitoring
          kubectl get ns demo-app   >/dev/null 2>&1 || kubectl create ns demo-app


      - name: Secret Grafana Cloud (Prometheus)
        run: |
          set -euo pipefail
          kubectl -n monitoring create secret generic grafana-cloud-metrics \
            --from-literal=username="${GC_PROM_USERNAME}" \
            --from-literal=password="${GC_PROM_PASSWORD}" \
            --dry-run=client -o yaml | kubectl apply -f -


      - name: App y alerts
        run: |
          kubectl apply -f k8s/app/podinfo.yaml
          kubectl apply -f k8s/alerts/mttr-recording-rules.yaml
          kubectl -n demo-app rollout status deploy/podinfo --timeout=5m
